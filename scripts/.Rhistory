setRepositories()
install.packages("rhdf5")
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
install.packages("tximport")
install.packages("ensembldb")
install.packages("EnsDb.Hsapiens.v86")
install.packages("beepr")
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(beepr) #just for fun
setRepositories()
install.packages("datapasta")
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(biomaRt) # an alternative for annotation
library(beepr) #just for fun
library(datapasta) #great for copying/pasting data into R environmentset
?read_tsv
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
targets
View(targets)
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path(targets$sample, "abundance.tsv") # set file paths to your mapped data
path
file.exists(path)
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
# get annotations using organism-specific package ----
Tx <- transcripts(EnsDb.Hsapiens.v86, columns=c("tx_id", "gene_name"))
Tx <- as_tibble(Tx)
View(Tx)
#need to change first column name to 'target_id'
Tx <- dplyr::rename(Tx, target_id = tx_id)
View(Tx)
#transcrip ID needs to be the first column in the dataframe
Tx <- dplyr::select(Tx, "target_id", "gene_name")
View(Tx)
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
# OPTIONAL: get annotations using BiomaRt----
# The annotation method described in the code chunk above works great if an organism-specific data base package exists for your organisms of interest
# however, this is only the case for human, mouse and rat....
# so, this optional code chunk shows one way you can get annotation data for other target organisms
# in this example, we're retrieving 1:1 mappings between transcript identifiers and gene symbols for the domesticated dog (Canis familiaris)
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
View(myMart)
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
View(available.datasets)
#now grab the ensembl annotations for dog
dog.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "clfamiliaris_gene_ensembl")
dog.attributes <- listAttributes(dog.anno)
View(dog.attributes)
Tx.dog <- getBM(attributes=c('ensembl_transcript_id_version',
'external_gene_name'),
mart = dog.anno)
View(Tx.dog)
Tx.dog
Tx.dog <- as_tibble(Tx.dog)
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(biomaRt) # an alternative for annotation
library(beepr) #just for fun
library(datapasta) #great for copying/pasting data into R environmentset
Tx.dog
Tx.dog <- as_tibble(Tx.dog)
Tx.dog
#we need to rename the two columns we just retreived from biomart
Tx.dog <- dplyr::rename(Tx.dog, target_id = ensembl_transcript_id_version,
gene_name = external_gene_name)
Tx.dog
View(Tx.dog)
# import Kallisto transcript counts into R using Tximport ----
# copy the abundance files to the working directory and rename so that each sample has a unique name
Txi_gene <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = FALSE, #How does the result change if this =FALSE vs =TRUE?
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
Txi_gene <- tximport(path,
type = "kallisto",
tx2gene = Tx,
txOut = FALSE, #How does the result change if this =FALSE vs =TRUE?
countsFromAbundance = "lengthScaledTPM",
ignoreTxVersion = TRUE)
beep(sound = 6)
setRepositories()
setRepositories()
detach("package:biomaRt", unload = TRUE)
library(biomaRt)
setwd("C:/Users/julia/Desktop/course_dataset/kallisto_output")
View(targets)
setwd("C:/Users/julia/Desktop/course_dataset")
# load packages----
library(rhdf5) #provides functions for handling hdf5 file formats (kallisto outputs bootstraps in this format)
library(tidyverse) # provides access to Hadley Wickham's collection of R packages for data science, which we will use throughout the course
library(tximport) # package for getting Kallisto results into R
library(ensembldb) #helps deal with ensembl
library(EnsDb.Hsapiens.v86) #replace with your organism-specific database package
library(biomaRt) # an alternative for annotation
library(beepr) #just for fun
library(datapasta) #great for copying/pasting data into R environmentset
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("scripts/studydesign.txt")
# read in your study design ----
#there are LOTS of ways to read data into R, but the readr package (from tidyverse) is one of the simplest
targets <- read_tsv("studydesign.txt")
# you can easily create file paths to the abundance files generated by Kallisto using the 'file.path' function
path <- file.path("kallisto_output", targets$sample, "abundance.tsv") # set file paths to your mapped data
# now check to make sure this path is correct by seeing if the files exist
all(file.exists(path))
path
View(Tx)
# loading annotations for ferrets
library(biomaRt) # an alternative for annotation
listMarts() #default host is ensembl.org, and most current release of mammalian genomes
#choose the 'mart' you want to work with
myMart <- useMart(biomart="ENSEMBL_MART_ENSEMBL")
#take a look at all available datasets within the selected mart
available.datasets <- listDatasets(myMart)
View(available.datasets)
#now grab the ensembl annotations for dog
ferret.anno <- useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset = "mpfuro_gene_ensembl")
ferret.attributes <- listAttributes(ferret.anno)
View(ferret.attributes)
View(ferret.attributes)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'external_gene_name',
'description',
'entrezgene_id',
'pfam'),
mart = ferret.anno)
View(Tx.ferret)
?getSequence
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'external_gene_name',
'description',
'entrezgene_id',
'pfam',
'chromosome_name'),
mart = ferret.anno)
View(Tx.ferret)
# get sequence 1 kb upstream of IFIT2
getSequence(chromosome = 'GL897268.1', start = 109033, id='IFIT2', upstream = 1000)
# get sequence 1 kb upstream of IFIT2
getSequence(chromosome = 'GL897268.1', start = 109033, id='ENSMPUT00000006545.1', upstream = 1000)
?useMart
# get sequence 1 kb upstream of IFIT2
mart <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset = "Tx.ferret")
mart = ferret.anno)
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'external_gene_name',
'description',
'entrezgene_id',
'pfam',
'chromosome_name'),
mart = ferret.anno)
# get sequence 1 kb upstream of IFIT2
getSequence(mart='ferret.anno', chromosome = 'GL897268.1', start = 109033, id='ENSMPUT00000006545.1', upstream = 1000)
?getSequence
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart='ferret.anno', chromosome = 'GL897268.1', start = 109033, id='ENSMPUT00000006545.1', upstream = 1000)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart="ferret.anno", start = 109033, type='ENSMPUT00000006545.1', id='IFIT2', upstream = 1000)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart="ferret.anno", start = 109033, type='ensembl', id='IFIT2', upstream = 1000)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart=ferret.anno, start = 109033, type='ensembl_gene_id', id='IFIT2', upstream = 1000)
listFilters()
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart=ferret.anno, seqType = 'gene_flank', start = 109033, end=115170, type='ensembl_gene_id', id='IFIT2', upstream = 1000)
View(IFIT2_seq)
1
Tx.ferret <- getBM(attributes=c('ensembl_transcript_id_version',
'start_position',
'end_position',
'external_gene_name',
'description',
'entrezgene_id',
'pfam',
'chromosome_name',
'ensembl_gene_id'),
mart = ferret.anno)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart=ferret.anno,
seqType = 'gene_flank',
start = 109033,
end=115170,
type='ensembl_gene_id',
id='ENSMPUG00000006489',
chromosome = 'GL897268.1',
upstream = 1000)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart=ferret.anno,
seqType = 'gene_flank',
start = 109033,
end=115170,
type='ensembl_gene_id',
id='ENSMPUG00000006489',
upstream = 1000)
# get sequence 1 kb upstream of IFIT2
IFIT2_seq <- getSequence(mart=ferret.anno,
seqType = 'gene_flank',
start = 109033,
end=115170,
type='ensembl_gene_id',
chromosome = 'GL897268.1',
upstream = 1000)
View(IFIT2_seq)
seq <- getSequence(id=c("MX1", "IFIT2", "OAS2", IRF1","IFNAR1","MX1),
seq <- getSequence(id=c("MX1", "IFIT2", "OAS2", "IRF1","IFNAR1","MX1),
seq <- getSequence(id=c("MX1", "IFIT2", "OAS2", "IRF1","IFNAR1","MX1"),
seq <- getSequence(id=c("MX1", "IFIT2", "OAS2", "IRF1","IFNAR1","MX1"),
type="hgnc_symbol",
seqType = "gene_flank",
upstream=1000,
mart=ferret.anno)
seq <- getSequence(id=c("MX1", "IFIT2", "OAS2", "IRF1","IFNAR1"),
type="hgnc_symbol",
seqType = "gene_flank",
upstream=1000,
mart=ferret.anno)
View(seq)
# get sequence 1 kb upstream of MX1
MX1_seq <- getSequence(mart=ferret.anno,
seqType = 'gene_flank',
start = 5070379,
end=5099577,
type='ensembl_gene_id',
chromosome = 'GL896984.1',
upstream = 1000)
View(MX1_seq)
